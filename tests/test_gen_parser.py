import pytest
import pandas as pd
import os
import importlib.util
import sys

# --- Add the project root to the Python path ---
# This ensures that the 'custom_parsers' module can be found by pytest.
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Define the banks to test. Pytest will run this test for each bank.
# You can add more banks here (e.g., "sbi") if you create more data directories.
SUPPORTED_BANKS = ["icici"]

@pytest.fixture(params=SUPPORTED_BANKS)
def bank_target(request):
    """Pytest fixture to provide each bank target to the test function."""
    return request.param

def test_generated_parser(bank_target):
    """
    This test function will be run by pytest.
    It dynamically imports the parser generated by the agent and validates its output
    against the ground truth `result.csv`.
    """
    parser_module_name = f"custom_parsers.{bank_target}_parser"
    parser_file_path = os.path.join(project_root, 'custom_parsers', f'{bank_target}_parser.py')

    # 1. Check if the parser file was actually generated
    assert os.path.exists(parser_file_path), f"Parser file does not exist: {parser_file_path}"

    # 2. Dynamically import the generated module
    try:
        spec = importlib.util.spec_from_file_location(parser_module_name, parser_file_path)
        assert spec is not None, "Could not create module spec."
        parser_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(parser_module)
    except Exception as e:
        pytest.fail(f"Failed to import the generated parser module: {e}")

    # 3. Check if the 'parse' function exists
    assert hasattr(parser_module, 'parse'), "Generated module is missing the 'parse' function."
    parse_function = parser_module.parse

    # 4. Define paths and run the parser
    pdf_path = os.path.join(project_root, f"data/{bank_target}/{bank_target} sample.pdf")
    expected_csv_path = os.path.join(project_root, f"data/{bank_target}/result.csv")

    assert os.path.exists(pdf_path), f"Sample PDF not found: {pdf_path}"
    assert os.path.exists(expected_csv_path), f"Result CSV not found: {expected_csv_path}"

    # 5. Run the parser and compare the DataFrames
    try:
        expected_df = pd.read_csv(expected_csv_path)
        result_df = parse_function(pdf_path)

        # Use pandas' testing utility for a strict, column-by-column comparison
        pd.testing.assert_frame_equal(result_df, expected_df)
    except Exception as e:
        pytest.fail(f"The parser's output did not match the expected result.csv. Error: {e}")
